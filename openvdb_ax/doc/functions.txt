/**

@page supportedFunctions OpenVDB AX Supported Functions

This page holds the full list of functions currently supported by OpenVDB AX. It
is usually automatically updated from the most recent output of the vdb_ax binary's
function option.

@section sFunctionContents Contents
- @ref secFunctions
    - @ref subsecabs
    - @ref subsecacos
    - @ref subsecaddtogroup
    - @ref subsecasin
    - @ref subsecatan
    - @ref subsecatan2
    - @ref subsecatof
    - @ref subsecatoi
    - @ref subseccbrt
    - @ref subsecceil
    - @ref subsecclamp
    - @ref subseccos
    - @ref subseccosh
    - @ref subseccross
    - @ref subseccurlsimplexnoise
    - @ref subsecdeletepoint
    - @ref subsecdeterminant
    - @ref subsecdot
    - @ref subsecexp
    - @ref subsecexp2
    - @ref subsecexternal
    - @ref subsecexternalv
    - @ref subsecfabs
    - @ref subsecfit
    - @ref subsecfloor
    - @ref subsecgetcoordx
    - @ref subsecgetcoordy
    - @ref subsecgetcoordz
    - @ref subsecgetvoxelpws
    - @ref subsechash
    - @ref subsecidentity3
    - @ref subsecidentity4
    - @ref subsecingroup
    - @ref subseclength
    - @ref subseclengthsq
    - @ref subseclerp
    - @ref subseclog
    - @ref subseclog10
    - @ref subseclog2
    - @ref subsecmax
    - @ref subsecmin
    - @ref subsecnormalize
    - @ref subsecpolardecompose
    - @ref subsecpostscale
    - @ref subsecpow
    - @ref subsecprescale
    - @ref subsecpretransform
    - @ref subsecprint
    - @ref subsecrand
    - @ref subsecremovefromgroup
    - @ref subsecround
    - @ref subsecsignbit
    - @ref subsecsimplexnoise
    - @ref subsecsin
    - @ref subsecsinh
    - @ref subsecsqrt
    - @ref subsectan
    - @ref subsectanh
    - @ref subsectrace
    - @ref subsectransform
    - @ref subsectranspose

@section secFunctions Functions

@subsection subsecabs abs
 - Computes the absolute value of an integer number.

  - int abs(int)
  - long abs(long)

@subsection subsecacos acos
 - Computes the principal value of the arc cosine of the input.

  - double acos(double)
  - float acos(float)

@subsection subsecaddtogroup addtogroup
 - Add the current point to the given group name, effectively setting its membership to true. If the
   group does not exist, it is implicitly created. This function has no effect if the point
   already belongs to the given group.

  - void addtogroup(string)

@subsection subsecasin asin
 - Computes the principal value of the arc sine of the input.

  - double asin(double)
  - float asin(float)

@subsection subsecatan atan
 - Computes the principal value of the arc tangent of the input.

  - double atan(double)
  - float atan(float)

@subsection subsecatan2 atan2
 - Computes the arc tangent of y/x using the signs of arguments to determine the correct quadrant.

  - double atan2(double; double)
  - float atan2(float; float)

@subsection subsecatof atof
 - Parses the string input, interpreting its content as a floating point number and returns its value
   as a double.

  - double atof(string)

@subsection subsecatoi atoi
 - Parses the string input interpreting its content as an integral number, which is returned as a value
   of type int.

  - int atoi(string)
  - long atoi(string)

@subsection subseccbrt cbrt
 - Computes the cubic root of the input.

  - double cbrt(double)
  - float cbrt(float)

@subsection subsecceil ceil
 - Computes the smallest integer value not less than arg.

  - double ceil(double)
  - float ceil(float)

@subsection subsecclamp clamp
 - Clamps the first argument to the minimum second argument value and maximum third argument value

  - double clamp(double; double; double)
  - float clamp(float; float; float)
  - int clamp(int; int; int)

@subsection subseccos cos
 - Computes the cosine of arg (measured in radians).

  - double cos(double)
  - float cos(float)

@subsection subseccosh cosh
 - Computes the hyperbolic cosine of the input

  - double cosh(double)
  - float cosh(float)

@subsection subseccross cross
 - Computes the cross product of two vectors

  - vec3d cross(vec3d; vec3d)
  - vec3f cross(vec3f; vec3f)
  - vec3i cross(vec3i; vec3i)

@subsection subseccurlsimplexnoise curlsimplexnoise
 - Generates divergence-free 3D noise, computed using a curl function on Simplex Noise.

  - vec3d curlsimplexnoise(vec3d)
  - vec3d curlsimplexnoise(double; double; double)

@subsection subsecdeletepoint deletepoint
 - Delete the current point from the point set. Note that this does not stop AX execution - any
   additional AX commands will be executed on the point and it will remain accessible until the
   end of execution.

  - void deletepoint()

@subsection subsecdeterminant determinant
 - Returns the determinant of a matrix.

  - float determinant(mat3f)
  - double determinant(mat3d)
  - float determinant(mat4f)
  - double determinant(mat4d)

@subsection subsecdot dot
 - Computes the dot product of two vectors

  - double dot(vec3d; vec3d)
  - float dot(vec3f; vec3f)
  - int dot(vec3i; vec3i)

@subsection subsecexp exp
 - Computes e (Euler's number, 2.7182818...) raised to the given power arg.

  - double exp(double)
  - float exp(float)

@subsection subsecexp2 exp2
 - Computes 2 raised to the given power arg.

  - double exp2(double)
  - float exp2(float)

@subsection subsecexternal external
 - Find a custom user parameter with a given name of type 'float' in the Custom data provided to the AX
   compiler. If the data can not be found, or is not of the expected type 0.0f is returned.

  - float external(string)

@subsection subsecexternalv externalv
 - Find a custom user parameter with a given name of type 'vector float' in the Custom data provided to
   the AX compiler. If the data can not be found, or is not of the expected type { 0.0f, 0.0f,
   0.0f } is returned.

  - vec3f externalv(string)

@subsection subsecfabs fabs
 - Computes the absolute value of a floating point value arg.

  - double fabs(double)
  - float fabs(float)

@subsection subsecfit fit
 - Fit the first argument to the output range by first clamping the value between the second and third
   input range arguments and then remapping the result to the output range fourth and fifth
   arguments

  - double fit(double; double; double; double; double)
  - float fit(float; float; float; float; float)
  - double fit(int; int; int; int; int)

@subsection subsecfloor floor
 - Computes the largest integer value not greater than arg.

  - double floor(double)
  - float floor(float)

@subsection subsecgetcoordx getcoordx
 - Returns the current voxel's X index value in index space as an integer.

  - int getcoordx()

@subsection subsecgetcoordy getcoordy
 - Returns the current voxel's Y index value in index space as an integer.

  - int getcoordy()

@subsection subsecgetcoordz getcoordz
 - Returns the current voxel's Z index value in index space as an integer.

  - int getcoordz()

@subsection subsecgetvoxelpws getvoxelpws
 - Returns the current voxel's position in world space as a vector float.

  - vec3f getvoxelpws()

@subsection subsechash hash
 - Return a hash of the provided string.

  - long hash(string)

@subsection subsecidentity3 identity3
 - Returns the 3x3 identity matrix

  - mat3f identity3()

@subsection subsecidentity4 identity4
 - Returns the 4x4 identity matrix

  - mat4f identity4()

@subsection subsecingroup ingroup
 - Return whether or not the current point is a member of the given group name. This returns false if
   the group does not exist.

  - bool ingroup(string)

@subsection subseclength length
 - Returns the length of the given vector

  - double length(vec3d)
  - float length(vec3f)

@subsection subseclengthsq lengthsq
 - Returns the squared length of the given vector

  - double lengthsq(vec3d)
  - float lengthsq(vec3f)
  - int lengthsq(vec3i)

@subsection subseclerp lerp
 - Performs bilinear interpolation between the values. If the amount is outside the range 0 to 1, the
   values will be extrapolated linearly. If amount is 0, the first value is returned. If it is 1,
   the second value is returned.

  - float lerp(float; float; float)
  - double lerp(double; double; double)
  - vec3f lerp(vec3f; vec3f; vec3f)
  - vec3d lerp(vec3d; vec3d; vec3d)

@subsection subseclog log
 - Computes the natural (base e) logarithm of arg.

  - double log(double)
  - float log(float)

@subsection subseclog10 log10
 - Computes the common (base-10) logarithm of arg.

  - double log10(double)
  - float log10(float)

@subsection subseclog2 log2
 - Computes the binary (base-2) logarithm of arg.

  - double log2(double)
  - float log2(float)

@subsection subsecmax max
 - Returns the larger of the given values.

  - double max(double; double)
  - float max(float; float)
  - int max(int; int)

@subsection subsecmin min
 - Returns the smaller of the given values.

  - double min(double; double)
  - float min(float; float)
  - int min(int; int)

@subsection subsecnormalize normalize
 - Returns the normalized result of the given vector.

  - vec3d normalize(vec3d)
  - vec3f normalize(vec3f)

@subsection subsecpolardecompose polardecompose
 - Decompose an invertible 3x3 matrix into its orthogonal matrix and symmetric matrix components.

  - bool polardecompose(mat3f; mat3f; mat3f)
  - bool polardecompose(mat3d; mat3d; mat3d)

@subsection subsecpostscale postscale
 - Post-scale a given matrix by the provided vector.

  - void postscale(mat4f; vec3d)
  - void postscale(mat4d; vec3d)

@subsection subsecpow pow
 - Computes the value of the first argument raised to the power of the second argument.

  - double pow(double; double)
  - float pow(float; float)
  - double pow(double; int)
  - float pow(float; int)

@subsection subsecprescale prescale
 - Pre-scale a given matrix by the provided vector.

  - void prescale(mat4f; vec3d)
  - void prescale(mat4d; vec3d)

@subsection subsecpretransform pretransform
 - Return the transformed vector by transpose of this matrix. This function is equivalent to
   pre-multiplying the matrix.

  - vec3d pretransform(mat3d; vec3d)
  - vec3f pretransform(mat3f; vec3f)
  - vec3d pretransform(mat4d; vec3d)
  - vec3f pretransform(mat4f; vec3f)
  - vec4d pretransform(mat4d; vec4d)
  - vec4f pretransform(mat4f; vec4f)

@subsection subsecprint print
 - Prints the input to the standard output stream. Warning: This will be run for every element.

  - void print(string)
  - void print(double)
  - void print(float)
  - void print(int)
  - void print(vec2i)
  - void print(vec2f)
  - void print(vec2d)
  - void print(vec3i)
  - void print(vec3f)
  - void print(vec3d)
  - void print(vec3i)
  - void print(vec3f)
  - void print(vec3d)
  - void print(mat3f)
  - void print(mat3d)
  - void print(mat4f)
  - void print(mat4d)

@subsection subsecrand rand
 - Creates a random number based on the provided seed. The number will be in the range of 0 to 1. The
   same number is produced for the same seed. Note that if rand is called without a seed the
   previous state of the random number generator is advanced for the currently processing point.
   This state is determined by the last call to rand() with a given seed. If rand is not called
   with a seed, the generator advances continuously across different points which can produce
   non-deterministic results. It is important that rand is always called with a seed at least once
   for deterministic results.

  - double rand()
  - double rand(double)
  - double rand(int)

@subsection subsecremovefromgroup removefromgroup
 - Remove the current point from the given group name, effectively setting its membership to false.
   This function has no effect if the group does not exist.

  - void removefromgroup(string)

@subsection subsecround round
 - Computes the nearest integer value to arg (in floating-point format), rounding halfway cases away
   from zero.

  - double round(double)
  - float round(float)

@subsection subsecsignbit signbit
 - Determines if the given floating point number input is negative.

  - bool signbit(double)
  - bool signbit(float)

@subsection subsecsimplexnoise simplexnoise
 - Compute simplex noise at coordinates x, y and z. Coordinates which are not provided will be set to
   0.

  - double simplexnoise(double)
  - double simplexnoise(double; double)
  - double simplexnoise(double; double; double)
  - double simplexnoise(vec3d)

@subsection subsecsin sin
 - Computes the sine of arg (measured in radians).

  - double sin(double)
  - float sin(float)

@subsection subsecsinh sinh
 - Computes the hyperbolic sine of the input

  - double sinh(double)
  - float sinh(float)

@subsection subsecsqrt sqrt
 - Computes the square root of arg.

  - double sqrt(double)
  - float sqrt(float)

@subsection subsectan tan
 - Computes the tangent of arg (measured in radians).

  - double tan(double)
  - float tan(float)
  - double tan(int)

@subsection subsectanh tanh
 - Computes the hyperbolic tangent of the input

  - double tanh(double)
  - float tanh(float)

@subsection subsectrace trace
 - Return the trace of a matrix, the sum of the diagonal elements.

  - float trace(mat3f)
  - double trace(mat3d)
  - float trace(mat4f)
  - double trace(mat4d)

@subsection subsectransform transform
 - Return the transformed vector by this matrix. This function is equivalent to post-multiplying the
   matrix.

  - vec3d transform(vec3d; mat3d)
  - vec3f transform(vec3f; mat3f)
  - vec3d transform(vec3d; mat4d)
  - vec3f transform(vec3f; mat4f)
  - vec4d transform(vec4d; mat4d)
  - vec4f transform(vec4f; mat4f)

@subsection subsectranspose transpose
 - Transpose of a matrix

  - mat3d transpose(mat3d)
  - mat3f transpose(mat3f)
  - mat4d transpose(mat4d)
  - mat4f transpose(mat4f)

**/
